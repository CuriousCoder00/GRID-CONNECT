generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  // relationMode = "prisma"
}

model User {
  id String @id @default(uuid())

  name String

  email    String  @unique
  username String? @unique
  password String?

  image String? @db.Text

  communities Community[]
  members     Member[]
  accounts    Account[]

  role MemberRole @default(GUEST)

  emailVerified DateTime?

  activities Activity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Activity {
  id        String   @id @default(uuid())
  data      String   @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model Post {
//   id        String @id @default(uuid())
//   title     String
//   content   String
//   imageUrl  String @db.Text
//   userId    String
//   user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
//   comments  Comment[]
//   likes     Like[]
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Comment {
//   id        String @id @default(uuid())
//   content   String
//   userId    String
//   user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
//   postId    String
//   post      Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
//   likes     Like[]
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Like {
//   id        String @id @default(uuid())
//   userId    String
//   user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
//   postId    String
//   post      Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
//   commentId String
//   comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model Community {
  id          String  @id @default(uuid())
  name        String
  description String
  imageUrl    String? @db.Text
  inviteCode  String  @unique

  category String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  members Member[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Category {
  name String @id @unique
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  communityId String
  communities Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([communityId])
}
